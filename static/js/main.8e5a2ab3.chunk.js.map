{"version":3,"sources":["components/Board.js","components/Rank.js","components/Square.js","assets/Chess_ndt45.svg","components/Knight.js","utils/mathUtils.js","strings.js","constants.js","utils/boardUtils.js","LangContext.js","containers/Buttons.js","components/DisclosureWidget.js","utils/useCopy.js","components/StatsSection.js","containers/Stats.js","components/Checkbox.js","components/NumberInput.js","containers/Settings.js","containers/Main.js","utils/imageUtils.js","components/LangSwitcher.js","App.js","reportWebVitals.js","index.js"],"names":["Board","refCallback","children","className","ref","Rank","rankName","isCurrent","Square","handleClick","visitCount","maxSquareCount","squareName","getHeatmapHexString","setDropSquare","makeManualMove","unsetClickedSquare","isDragging","isTarget","isManual","displaySettings","showCount","showPercent","showHeatmap","showHighlight","useState","isDropTarget","setIsDropTarget","ratio","percentText","Math","round","style","backgroundColor","handleDragOver","event","preventDefault","dataTransfer","dropEffect","tdClass","undefined","title","onDragEnter","onDragOver","onDragLeave","onDrop","onClick","Knight","squareWidth","visualRankIndex","fileIndex","interval","setIsDragging","isDraggable","isResizing","isClicked","setClickedSquare","transitionValue","cursor","width","height","left","top","transition","role","draggable","onDragStart","setData","effectAllowed","onDragEnd","src","knightSvg","alt","Vector","x","y","plus","addedVector","newCoords","times","multipliedScalar","reverse","this","array","checkIfBIsNotOutsideAAndC","a","b","c","strings","langCode","en","fr","OTHER_LANG","OTHER_LANG_CODE","TITLE","START","STOP","RESET","SETTINGS","SPEED","SPEED_NAMES","SHOW","KNIGHT","COUNT","PERCENT_MAX","HEATMAP","HIGHLIGHT","BOARD","RANKS","FILES","NEW_BOARD","MODE","AUTOMATIC","MANUAL","STATS","TRIP_COUNT","MOVE_COUNTS","AVERAGE","TOTAL_MOVES","COPY","COPY_MSG","COPY_BOARD","COPIED","TO_INITIAL","TO_ALL","Object","keys","forEach","key","empty","ALPHABET","SPEED_MAP","Map","MIN_INTERVAL","getFileName","getRankName","rankIndex","toString","getSquareName","parseSquareName","split","indexOf","parseInt","checkIfLegal","totalFiles","totalRanks","memoizedMoves","prevDimsString","getLegalMoves","boardDims","dimsString","join","Array","isArray","startSquare","moves","PI","cos","sin","theta","firstOffset","twoSquareOffset","twoStepSquare","secondOffset","firstEndIndices","secondEndIndices","push","LangContext","createContext","lang","setLang","startTimer","makeRandomMoves","setIntervalId","totalNewMoves","max","window","setInterval","Buttons","resetBoard","useContext","setPrevDimsString","intervalId","prevInterval","setPrevInterval","resetRef","useRef","useEffect","clearInterval","handleStop","disabled","type","current","blur","DisclosureWidget","buttonText","restProps","expanded","setExpanded","togglerClass","contentClass","cloneElement","copyToClipboard","text","callback","navigator","clipboard","writeText","useCopy","copyCallback","resetCallback","hasCopied","setHasCopied","timeoutId","setTimeout","clearTimeout","string","sumReducer","acc","val","StatsSection","id","heading","setButtonText","handleCopy","showCopy","setShowCopy","textareaRef","scrollTo","scrollHeight","behavior","textareaId","countId","aveId","textareaValue","average","length","reduce","toFixed","clipboardValue","EOL","buttonClass","classNames","copy","show","msgClass","data-heading","aria-labelledby","htmlFor","onMouseEnter","onMouseLeave","readOnly","value","Stats","stats","totalMoves","countsForReturn","countsForTour","visitCounts","visitCountsString","slice","map","rankCounts","Checkbox","isChecked","isDisabled","handleChange","labelClass","onChange","checked","NumberInput","label","min","intervals","from","values","Settings","speedNames","speedIndex","setSpeed","showKnight","toggleDisplaySettings","initialTotalFiles","initialTotalRanks","changeDimensions","setMode","newTotalFiles","setNewTotalFiles","newTotalRanks","setNewTotalRanks","multiple","nameObj","i","target","name","initialStats","currentReturnCount","currentTourCount","Main","boardRefCallback","element","boardEl","clientWidth","state","setState","resizeCallback","contentRect","newId","heatValue","imageData","rawIndex","data","index","byte","red","green","blue","getHeatmapRGB","gradientImageData","reverseRankIndex","moveKnight","newMoves","newSquareNames","indices","newVisitCounts","rank","filter","lastMove","newMaxSquareCount","flat","currentFileIndex","currentRankIndex","startSquareName","visitedSquareNameSet","tempFileIndex","tempRankIndex","tempReturnCount","tempTourCount","tempVisitedSquareNameSet","Set","newReturnCounts","newTourCounts","possibleMoves","nextMoveIndex","floor","random","nextMove","nextSquareName","add","size","newStats","concat","newReturnCount","newTourCount","newVisitedSquareNameSet","settingName","newDisplaySettings","assign","initialRankIndex","initialFileIndex","fill","document","documentElement","setProperty","newSquareWidth","console","error","bool","targetSquareNames","Error","logicalRankIndex","move","canvasWidth","colorStops","virtualCanvas","createElement","canvasContext","getContext","heatmapGradient","createLinearGradient","colorStop","addColorStop","fillStyle","fillRect","getImageData","getGradientImageData","getComputedStyle","getPropertyValue","resizeObserver","ResizeObserver","observe","disconnect","displayKnight","rankVisits","isCurrentRank","logicalFileIndex","includes","props","Component","LangSwitcher","App","language","newLang","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8e5a2ab3.chunk.js","sourcesContent":["const Board = ({ refCallback, children }) => (\n  <div className=\"board-wrapper\">\n    <table ref={refCallback}>\n      <tbody>\n        {children}\n      </tbody>\n    </table>\n  </div>\n);\n\nexport default Board;","const Rank = ({ rankName, isCurrent, children }) => (\n  <tr>{children}</tr>\n);\n\nexport default Rank;\n","import { useState } from \"react\";\n\nconst Square = ({\n  visitCount,\n  maxSquareCount,\n  squareName,\n  getHeatmapHexString,\n  setDropSquare,\n  makeManualMove,\n  unsetClickedSquare,\n  isCurrent,\n  isDragging,\n  isTarget,\n  isManual,\n  displaySettings: { showCount, showPercent, showHeatmap, showHighlight },\n}) => {\n  const [isDropTarget, setIsDropTarget] = useState(false);\n\n  const ratio = visitCount / maxSquareCount;\n  const percentText = `${Math.round(100 * ratio)}%`;\n  const style = showHeatmap\n    ? { backgroundColor: getHeatmapHexString(ratio) }\n    : null;\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n    if (!isDropTarget && (!isManual || isTarget)) {\n      setIsDropTarget(true);\n    }\n  };\n  const handleDragLeave = (event) => {\n    event.preventDefault();\n    setIsDropTarget(false);\n  };\n  const handleDrop = (event) => {\n    event.preventDefault();\n    setIsDropTarget(false);\n    if (isManual && isTarget) makeManualMove(squareName);\n    else if (!isManual) setDropSquare(squareName);\n  };\n  let handleClick;\n  if (isManual) {\n    if (isTarget) {\n      handleClick = () => {\n        makeManualMove(squareName);\n      };\n    } else {\n      handleClick = () => {\n        unsetClickedSquare();\n      };\n    }\n  }\n\n  let tdClass = isCurrent && showHighlight ? \"current\" : undefined;\n  if (tdClass === \"current\" && isDragging) {\n    tdClass += \" dragged\";\n  }\n  if (isDropTarget || isTarget) {\n    tdClass = \"drop-target\";\n  }\n\n  return (\n    <td\n      className={tdClass}\n      title={squareName}\n      onDragEnter={handleDragOver}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDrop={handleDrop}\n      onClick={handleClick}\n      style={style}\n    >\n      {showPercent && <span className=\"percent\">{percentText}</span>}\n      {showCount && <span className=\"count\">{visitCount}</span>}\n    </td>\n  );\n};\n\nexport default Square;\n","export default __webpack_public_path__ + \"static/media/Chess_ndt45.d714eeb4.svg\";","// import { ReactComponent as KnightSvg } from '../assets/Chess_ndt45.svg';\nimport knightSvg from \"../assets/Chess_ndt45.svg\";\n\n// svg from WikiCommons, importing for img element to add alt text\n/*\n  By en:User:Cburnett - Own work\n  This W3C-unspecified vector image was created with Inkscape .,\n  CC BY-SA 3.0,\n  https://commons.wikimedia.org/w/index.php?curid=1499807\n*/\n\nfunction Knight({\n  squareWidth,\n  visualRankIndex,\n  fileIndex,\n  interval,\n  setIsDragging,\n  isDraggable,\n  isResizing,\n  isManual,\n  isClicked,\n  setClickedSquare,\n  unsetClickedSquare,\n}) {\n  const transitionValue = isResizing ? \"none\" : `all ${interval / 2}ms`;\n  const handleDragStart = (event) => {\n    event.dataTransfer.setData(\"text/plain\", `${fileIndex},${visualRankIndex}`);\n    event.dataTransfer.effectAllowed = \"move\";\n    event.dataTransfer.dropEffect = \"move\";\n    setIsDragging(true);\n    if (isManual) setClickedSquare(fileIndex, visualRankIndex);\n  };\n  const handleDragEnd = () => {\n    setIsDragging(false);\n  };\n  let handleClick;\n  if (isManual) {\n    handleClick = isClicked\n      ? () => {\n          unsetClickedSquare();\n        }\n      : () => {\n          setClickedSquare(fileIndex, visualRankIndex);\n        };\n  }\n\n  let cursor = \"default\";\n  if (isManual) cursor = \"pointer\";\n  else if (isDraggable) cursor = \"grab\";\n\n  return (\n    <div\n      className=\"piece\"\n      style={{\n        width: squareWidth,\n        height: squareWidth,\n        left: squareWidth * fileIndex,\n        top: squareWidth * visualRankIndex,\n        transition: transitionValue,\n        cursor: cursor,\n      }}\n      role=\"button\"\n      onClick={handleClick}\n    >\n      <img\n        draggable={isDraggable}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        width={0.7 * squareWidth}\n        height={0.7 * squareWidth}\n        src={knightSvg}\n        alt=\"Knight\"\n      />\n    </div>\n  );\n}\n\nexport default Knight;\n","const Vector = class {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.array = [x, y];\n  }\n\n  plus = (addedVector) => {\n    const newCoords = [this.x + addedVector.x, this.y + addedVector.y];\n    return new Vector(...newCoords);\n  }\n\n  times = (multipliedScalar) => {\n    const newCoords = [multipliedScalar * this.x, multipliedScalar * this.y];\n    return new Vector(...newCoords);\n  }\n\n  reverse = () => {\n    return new Vector(this.y, this.x);\n  }\n}\n\nfunction checkIfBIsNotOutsideAAndC(a, b, c) {\n  return (a <= b) && (b <= c);\n}\n\nexport { Vector, checkIfBIsNotOutsideAAndC };\n","const strings = {\n  langCode: {\n    en: \"EN\",\n    fr: \"FR\",\n  },\n  OTHER_LANG: {\n    en: \"Français\",\n    fr: \"English\",\n  },\n  OTHER_LANG_CODE: {\n    en: \"fr\",\n    fr: \"en\",\n  },\n  TITLE: {\n    en: \"Random Knight Jumps\",\n    fr: \"Marche Aléatoire du Cavalier\",\n  },\n  START: {\n    en: \"Start\",\n    fr: \"Marche\",\n  },\n  STOP: {\n    en: \"Stop\",\n    fr: \"Arrêt\",\n  },\n  RESET: {\n    en: \"Reset\",\n    fr: \"Réinitialiser\",\n  },\n  SETTINGS: {\n    en: \"Settings\",\n    fr: \"Paramètres\",\n  },\n  SPEED: {\n    en: \"Speed\",\n    fr: \"Vitesse\",\n  },\n  SPEED_NAMES: [\n    {\n      en: \"Walk\",\n      fr: \"Pas\",\n    },\n    {\n      en: \"Trot\",\n      fr: \"Trot\",\n    },\n    {\n      en: \"Canter\",\n      fr: \"Petit galop\",\n    },\n    {\n      en: \"Gallop\",\n      fr: \"Galop\",\n    },\n    {\n      en: \"Jet\",\n      fr: \"Turboréacteur\",\n    },\n    {\n      en: \"Warp\",\n      fr: \"Supraluminique\",\n    },\n  ],\n  SHOW: {\n    en: \"Show\",\n    fr: \"Afficher\",\n  },\n  KNIGHT: {\n    en: \"Knight\",\n    fr: \"Cavalier\",\n  },\n  COUNT: {\n    en: \"Count\",\n    fr: \"Compte\",\n  },\n  PERCENT_MAX: {\n    en: \"% of max\",\n    fr: \"% de la valeur max\",\n  },\n  HEATMAP: {\n    en: \"Heatmap\",\n    fr: \"Carte de chaleur\",\n  },\n  HIGHLIGHT: {\n    en: \"Highlight\",\n    fr: \"Surlignage\",\n  },\n  BOARD: {\n    en: \"Board\",\n    fr: \"Échiquier\",\n  },\n  RANKS: {\n    en: \"Ranks\",\n    fr: \"Rangées\",\n  },\n  FILES: {\n    en: \"Files\",\n    fr: \"Colonnes\",\n  },\n  NEW_BOARD: {\n    en: \"New Board\",\n    fr: \"Nouvel Échiquier\",\n  },\n  MODE: {\n    en: \"Mode\",\n    fr: \"Mode\",\n  },\n  AUTOMATIC: {\n    en: \"Automatic\",\n    fr: \"Automatique\",\n  },\n  MANUAL: {\n    en: \"Manual\",\n    fr: \"Manuel\",\n  },\n  STATS: {\n    en: \"Stats for nerds\",\n    fr: \"Statistiques\",\n  },\n  TRIP_COUNT: {\n    en: \"Completed trips:\",\n    fr: \"Voyages terminés:\",\n  },\n  MOVE_COUNTS: {\n    en: \"Moves per trip:\",\n    fr: \"Coups par voyage:\",\n  },\n  AVERAGE: {\n    en: \"Average:\",\n    fr: \"Moyen:\",\n  },\n  TOTAL_MOVES: {\n    en: \"Total moves:\",\n    fr: \"Nombre de coups:\",\n  },\n  COPY: {\n    en: \"Copy\",\n    fr: \"Copier\",\n  },\n  COPY_MSG: {\n    en: \"Formatted as single column\",\n    fr: \"En forme d'une seule colonne\",\n  },\n  COPY_BOARD: {\n    en: \"Copy board as CSV\",\n    fr: \"Copier l'échiquier au format CSV\",\n  },\n  COPIED: {\n    en: \"Copied!\",\n    fr: \"Copié!\",\n  },\n  TO_INITIAL: {\n    en: \"To initial square\",\n    fr: \"À la case initiale\",\n  },\n  TO_ALL: {\n    en: \"To all squares\",\n    fr: \"À toutes les cases\",\n  },\n};\n\nObject.keys(strings).forEach((key) => {\n  strings[key].empty = \"\";\n});\n\nexport default strings;\n","import strings from \"./strings\";\n\nconst { SPEED_NAMES } = strings;\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n\nconst SPEED_MAP = new Map([\n  [SPEED_NAMES[0], 600],\n  [SPEED_NAMES[1], 300],\n  [SPEED_NAMES[2], 200],\n  [SPEED_NAMES[3], 100],\n  [SPEED_NAMES[4], 10],\n  [SPEED_NAMES[5], 1],\n]);\n\nconst MIN_INTERVAL = 100;\n\nconst MIN_BOARD_LENGTH = 5;\nconst MAX_BOARD_LENGTH = 12;\n\nconst CANVAS_WIDTH = 500;\n\nexport {\n  ALPHABET,\n  SPEED_MAP,\n  MIN_INTERVAL,\n  CANVAS_WIDTH,\n  MIN_BOARD_LENGTH,\n  MAX_BOARD_LENGTH,\n};\n","import { Vector, checkIfBIsNotOutsideAAndC } from './mathUtils';\nimport { ALPHABET } from '../constants';\n\nconst getFileName = fileIndex => ALPHABET[fileIndex];\nconst getRankName = rankIndex => (rankIndex + 1).toString();\nconst getSquareName = (fileIndex, rankIndex) =>\n  getFileName(fileIndex) + getRankName(rankIndex);\nconst parseSquareName = (squareName) => ({\n  fileIndex: ALPHABET.split('').indexOf(squareName[0]),\n  rankIndex: parseInt(squareName[1], 10) - 1\n});\n\n\nconst checkIfLegal = (fileIndex, rankIndex, totalFiles, totalRanks) =>\n  checkIfBIsNotOutsideAAndC(0, fileIndex, totalFiles - 1)\n    && checkIfBIsNotOutsideAAndC(0, rankIndex, totalRanks - 1);\n\nlet memoizedMoves = { prevDimsString: '0x0' };\nconst resetMemoizedMoves = (newDimsString) =>{\n  memoizedMoves = { prevDimsString: newDimsString };\n};\n\nconst getLegalMoves = (fileIndex, rankIndex, totalFiles, totalRanks) => {\n  const squareName = getSquareName(fileIndex, rankIndex);\n  const boardDims = [totalFiles, totalRanks];\n\n  const dimsString = [totalFiles, totalRanks].join('x');\n  if (dimsString !== memoizedMoves.prevDimsString) {\n    resetMemoizedMoves(dimsString);\n  }\n\n  if (Array.isArray(memoizedMoves[squareName])) return memoizedMoves[squareName];\n\n  const startSquare = new Vector(fileIndex, rankIndex);\n  const moves = [];\n  const { PI, cos, sin, round } = Math;\n\n  // each iteration goes out two squares, then sideways plus/minus one square\n  // start at 0 degrees, increase by 90 degrees, stop before 360 degrees\n  for (let theta = 0; theta < 2 * PI; theta += PI / 2) {\n    // start iterating for (1, 0), then (0, 1)...\n    const firstOffset = new Vector(round(cos(theta)), round(sin(theta)));\n    const twoSquareOffset = firstOffset.times(2);\n    const twoStepSquare = startSquare.plus(twoSquareOffset);\n\n    if (checkIfLegal(...twoStepSquare.array, ...boardDims)) {\n      const secondOffset = firstOffset.reverse();\n      const firstEndIndices = twoStepSquare.plus(secondOffset).array;\n      const secondEndIndices = twoStepSquare.plus(secondOffset.times(-1)).array;\n\n      if (checkIfLegal(...firstEndIndices, ...boardDims)) {\n        moves.push(firstEndIndices);\n      };\n      if (checkIfLegal(...secondEndIndices, ...boardDims)) {\n        moves.push(secondEndIndices);\n      }\n    }\n  }\n\n  memoizedMoves[squareName] = moves;\n  return moves;\n}\n\nexport {\n  getLegalMoves,\n  getSquareName,\n  getRankName,\n  getFileName,\n  parseSquareName,\n  checkIfLegal\n};\n","import { createContext } from \"react\";\n\nconst LangContext = createContext({\n  lang: \"empty\",\n  setLang: () => {},\n});\n\nexport default LangContext;\n","import { useState, useEffect, useRef, useContext } from \"react\";\n\nimport LangContext from \"../LangContext\";\nimport strings from \"../strings\";\nimport { MIN_INTERVAL } from \"../constants\";\n\nconst startTimer = (interval, makeRandomMoves, setIntervalId) => {\n  const totalNewMoves = Math.max(1, MIN_INTERVAL / interval);\n  const newIntervalId = window.setInterval(() => {\n    makeRandomMoves(totalNewMoves);\n  }, Math.max(MIN_INTERVAL, interval));\n  setIntervalId(newIntervalId);\n};\n\nfunction Buttons({\n  makeRandomMoves,\n  resetBoard,\n  interval,\n  totalFiles,\n  totalRanks,\n  isManual,\n}) {\n  const { lang } = useContext(LangContext);\n  const { START, STOP, RESET } = strings;\n\n  const dimsString = `${totalFiles}x${totalRanks}`;\n  const [prevDimsString, setPrevDimsString] = useState(dimsString);\n  const [intervalId, setIntervalId] = useState(null);\n  const [prevInterval, setPrevInterval] = useState(interval);\n  const resetRef = useRef(null);\n  useEffect(() => {\n    if (isManual && intervalId) {\n      window.clearInterval(intervalId);\n      setIntervalId(null);\n    }\n    if (intervalId !== null) {\n      if (interval !== prevInterval) {\n        window.clearInterval(intervalId);\n        startTimer(interval, makeRandomMoves, setIntervalId);\n      }\n      if (dimsString !== prevDimsString) {\n        window.clearInterval(intervalId);\n        setIntervalId(null);\n      }\n    }\n    setPrevInterval(interval);\n    setPrevDimsString(dimsString);\n\n    return () => {\n      if (intervalId) window.clearInterval(intervalId);\n    };\n  }, [\n    intervalId,\n    interval,\n    prevInterval,\n    makeRandomMoves,\n    prevDimsString,\n    dimsString,\n    isManual,\n  ]);\n\n  const handleStart = () => {\n    startTimer(interval, makeRandomMoves, setIntervalId);\n  };\n  const handleStop = () => {\n    window.clearInterval(intervalId);\n    setIntervalId(null);\n  };\n  const handleReset = () => {\n    if (intervalId !== null) handleStop();\n    resetBoard();\n    resetRef.current.blur();\n  };\n\n  return (\n    <>\n      <button\n        disabled={isManual || intervalId !== null}\n        className=\"panel-button\"\n        onClick={handleStart}\n        type=\"button\"\n      >\n        {START[lang]}\n      </button>\n      <button\n        disabled={isManual || intervalId === null}\n        className=\"panel-button\"\n        onClick={handleStop}\n        type=\"button\"\n      >\n        {STOP[lang]}\n      </button>\n      <button\n        ref={resetRef}\n        className=\"panel-button\"\n        onClick={handleReset}\n        type=\"button\"\n      >\n        {RESET[lang]}\n      </button>\n    </>\n  );\n}\n\nexport default Buttons;\n","import { useState, cloneElement } from \"react\";\n\nfunction DisclosureWidget({ buttonText, children, ...restProps }) {\n  const [expanded, setExpanded] = useState(false);\n  let togglerClass = \"disclosure-toggler\";\n  let contentClass = \"disclosure-content\";\n  if (expanded) {\n    togglerClass += \" open\";\n    contentClass += \" open\";\n  }\n  return (\n    <div>\n      <button\n        className={togglerClass}\n        onClick={() => {\n          setExpanded(!expanded);\n        }}\n      >\n        {buttonText}\n      </button>\n      <div className={contentClass}>{cloneElement(children, restProps)}</div>\n    </div>\n  );\n}\n\nexport default DisclosureWidget;\n","import { useState, useEffect, useRef } from \"react\";\n\nconst copyToClipboard = async (text, callback) => {\n  await navigator.clipboard.writeText(text);\n  callback();\n};\n\nfunction useCopy(copyCallback, resetCallback, lang) {\n  const [hasCopied, setHasCopied] = useState(false);\n  const timeoutId = useRef(null);\n\n  useEffect(() => {\n    if (hasCopied) {\n      timeoutId.current = window.setTimeout(() => {\n        resetCallback();\n        setHasCopied(false);\n      }, 700);\n    }\n    return () => {\n      if (hasCopied) {\n        window.clearTimeout(timeoutId.current);\n      }\n    };\n  }, [hasCopied, resetCallback, lang]);\n\n  const handleCopy = (string) => {\n    copyToClipboard(string, () => {\n      copyCallback();\n      setHasCopied(true);\n    });\n  };\n\n  return handleCopy;\n}\n\nexport default useCopy;\n","import { useState, useRef, useEffect, useContext } from \"react\";\nimport classNames from \"classnames\";\nimport { EOL } from \"os\";\n\nimport strings from \"../strings\";\nimport LangContext from \"../LangContext\";\nimport useCopy from \"../utils/useCopy\";\n\nconst { TRIP_COUNT, MOVE_COUNTS, AVERAGE, COPY, COPY_MSG, COPIED } = strings;\n\nconst sumReducer = (acc, val) => acc + val;\n\nfunction StatsSection({ id, heading, array }) {\n  const { lang } = useContext(LangContext);\n  const [buttonText, setButtonText] = useState(COPY[lang]);\n\n  const handleCopy = useCopy(\n    () => setButtonText(COPIED[lang]),\n    () => setButtonText(COPY[lang]),\n    lang\n  );\n\n  const [showCopy, setShowCopy] = useState(false);\n  const textareaRef = useRef(null);\n\n  const handleMouseEnter = () => {\n    setShowCopy(true);\n  };\n  const handleMouseLeave = () => {\n    setShowCopy(false);\n  };\n\n  useEffect(() => {\n    // NB: scroll methods not implemented in jsdom\n    // see https://github.com/jsdom/jsdom/pull/2626\n    // and https://github.com/jsdom/jsdom/issues/2751\n    // FIXME: make this testable\n    if (textareaRef?.current?.scrollTo) {\n      const { scrollHeight } = textareaRef.current;\n      textareaRef.current.scrollTo({\n        top: scrollHeight,\n        left: 0,\n        behavior: \"smooth\",\n      });\n    }\n  });\n  const textareaId = `textarea-${id}`;\n  const countId = `count-${id}`;\n  const aveId = `ave-${id}`;\n\n  const textareaValue = array.join(\", \");\n  const average =\n    array.length > 0\n      ? (array.reduce(sumReducer) / array.length).toFixed(2)\n      : \"\";\n  let clipboardValue = array.join(EOL);\n  clipboardValue += EOL;\n\n  const buttonClass = classNames({ copy: true, show: showCopy });\n  const msgClass = classNames({ \"copy-msg\": true, show: showCopy });\n\n  return (\n    <div className=\"section\" data-heading={heading}>\n      <div>\n        <label className=\"inline\" id={countId}>\n          {TRIP_COUNT[lang]}\n        </label>\n        <span aria-labelledby={countId}>{array.length.toString()}</span>\n      </div>\n      <label htmlFor={textareaId}>{MOVE_COUNTS[lang]}</label>\n      <div\n        className=\"textarea-wrapper\"\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <textarea\n          id={textareaId}\n          ref={textareaRef}\n          readOnly\n          value={textareaValue}\n        />\n        <button\n          className={buttonClass}\n          onClick={() => {\n            handleCopy(clipboardValue);\n          }}\n        >\n          {buttonText}\n        </button>\n        <div className={msgClass}>{COPY_MSG[lang]}</div>\n      </div>\n\n      <div>\n        <label className=\"inline\" id={aveId}>\n          {AVERAGE[lang]}\n        </label>\n        <span aria-labelledby={aveId}>{average}</span>\n      </div>\n    </div>\n  );\n}\n\nexport default StatsSection;\n","import { useState, useContext } from \"react\";\nimport { EOL } from \"os\";\n\nimport StatsSection from \"../components/StatsSection\";\nimport strings from \"../strings\";\nimport LangContext from \"../LangContext\";\nimport useCopy from \"../utils/useCopy\";\n\nconst { TO_INITIAL, TO_ALL, TOTAL_MOVES, COPIED, COPY_BOARD } = strings;\n\nfunction Stats({\n  stats: { totalMoves, countsForReturn, countsForTour },\n  visitCounts,\n}) {\n  const { lang } = useContext(LangContext);\n\n  const [buttonText, setButtonText] = useState(COPY_BOARD[lang]);\n\n  let visitCountsString = visitCounts\n    .slice(0)\n    .reverse()\n    .map((rankCounts) => rankCounts.join(\",\"))\n    .join(EOL);\n  visitCountsString += EOL;\n\n  const handleCopy = useCopy(\n    () => {\n      setButtonText(COPIED[lang]);\n    },\n    () => {\n      setButtonText(COPY_BOARD[lang]);\n    },\n    lang\n  );\n  const handleClick = () => {\n    handleCopy(visitCountsString);\n  };\n\n  return (\n    <div>\n      <StatsSection\n        id=\"returnsToInitial\"\n        heading={TO_INITIAL[lang]}\n        array={countsForReturn}\n      />\n      <StatsSection id=\"tours\" heading={TO_ALL[lang]} array={countsForTour} />\n      <div>\n        <label id=\"totalMoves\" className=\"inline\" htmlFor=\"totalMoves\">\n          {TOTAL_MOVES[lang]}\n        </label>\n        <span aria-labelledby=\"totalMoves\">{totalMoves.toString()}</span>\n      </div>\n      <button\n        type=\"button\"\n        className=\"button button-link\"\n        onClick={handleClick}\n      >\n        {buttonText}\n      </button>\n    </div>\n  );\n}\n\nexport default Stats;\n","function Checkbox({ id, isChecked, isDisabled, children, handleChange }) {\n  const labelClass = isDisabled ? \"disabled\" : undefined;\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={id}\n        onChange={handleChange}\n        checked={isChecked}\n        disabled={isDisabled}\n      />\n      <label className={labelClass} htmlFor={id}>\n        {children}\n      </label>\n    </div>\n  );\n}\n\nexport default Checkbox;\n","import { MIN_BOARD_LENGTH, MAX_BOARD_LENGTH } from \"../constants\";\n\nfunction NumberInput({ label, value, handleChange }) {\n  return (\n    <div className=\"number-input-wrapper\">\n      <label className=\"number\" htmlFor={`${label}-input`}>\n        {label}\n      </label>\n      <input\n        type=\"number\"\n        id={`${label}-input`}\n        value={value}\n        min={MIN_BOARD_LENGTH}\n        max={MAX_BOARD_LENGTH}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n\nexport default NumberInput;\n","import { useState, useContext } from \"react\";\n\nimport Checkbox from \"../components/Checkbox\";\nimport NumberInput from \"../components/NumberInput\";\nimport { SPEED_MAP, MIN_INTERVAL } from \"../constants\";\nimport strings from \"../strings\";\nimport LangContext from \"../LangContext\";\n\nconst intervals = Array.from(SPEED_MAP.values());\nconst {\n  SPEED,\n  SHOW,\n  KNIGHT,\n  COUNT,\n  PERCENT_MAX,\n  HEATMAP,\n  HIGHLIGHT,\n  BOARD,\n  RANKS,\n  FILES,\n  NEW_BOARD,\n  MODE,\n  AUTOMATIC,\n  MANUAL,\n} = strings;\n\nfunction Settings({\n  speedNames,\n  speedIndex,\n  setSpeed,\n  displaySettings: {\n    showKnight,\n    showCount,\n    showPercent,\n    showHeatmap,\n    showHighlight,\n  },\n  toggleDisplaySettings,\n  initialTotalFiles,\n  initialTotalRanks,\n  changeDimensions,\n  isManual,\n  setMode,\n}) {\n  const { lang } = useContext(LangContext);\n  const [newTotalFiles, setNewTotalFiles] = useState(initialTotalFiles);\n  const [newTotalRanks, setNewTotalRanks] = useState(initialTotalRanks);\n\n  const handleFiles = ({ target: { value } }) => {\n    setNewTotalFiles(parseInt(value, 10));\n  };\n  const handleRanks = ({ target: { value } }) => {\n    setNewTotalRanks(parseInt(value, 10));\n  };\n  const handleUpdate = () => {\n    changeDimensions(newTotalFiles, newTotalRanks);\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"speed-select\">{SPEED[lang]}</label>\n      <select\n        id=\"speed-select\"\n        value={speedIndex.toString()}\n        onChange={setSpeed}\n        multiple={false}\n      >\n        {speedNames.map((nameObj, i) => (\n          <option value={i.toString()} key={i}>\n            {nameObj[lang]}\n          </option>\n        ))}\n      </select>\n      <div className=\"section\" data-heading={SHOW[lang]}>\n        <Checkbox\n          id=\"show-knight\"\n          isChecked={showKnight}\n          isDisabled={intervals[speedIndex] < MIN_INTERVAL}\n          handleChange={() => {\n            toggleDisplaySettings(\"showKnight\");\n          }}\n        >\n          {KNIGHT[lang]}\n        </Checkbox>\n        <Checkbox\n          id=\"show-count\"\n          isChecked={showCount}\n          handleChange={() => {\n            toggleDisplaySettings(\"showCount\");\n          }}\n        >\n          {COUNT[lang]}\n        </Checkbox>\n        <Checkbox\n          id=\"show-percent\"\n          isChecked={showPercent}\n          handleChange={() => {\n            toggleDisplaySettings(\"showPercent\");\n          }}\n        >\n          {PERCENT_MAX[lang]}\n        </Checkbox>\n        <Checkbox\n          id=\"show-heatmap\"\n          isChecked={showHeatmap}\n          handleChange={() => {\n            toggleDisplaySettings(\"showHeatmap\");\n          }}\n        >\n          {HEATMAP[lang]}\n        </Checkbox>\n        <Checkbox\n          id=\"show-highlight\"\n          isChecked={showHighlight}\n          handleChange={() => {\n            toggleDisplaySettings(\"showHighlight\");\n          }}\n        >\n          {HIGHLIGHT[lang]}\n        </Checkbox>\n      </div>\n      <div className=\"section\" data-heading={BOARD[lang]}>\n        <NumberInput\n          label={RANKS[lang]}\n          value={newTotalRanks}\n          handleChange={handleRanks}\n        />\n        <NumberInput\n          label={FILES[lang]}\n          value={newTotalFiles}\n          handleChange={handleFiles}\n        />\n        <button\n          type=\"button\"\n          className=\"button button-link\"\n          onClick={handleUpdate}\n        >\n          {NEW_BOARD[lang]}\n        </button>\n      </div>\n      <section className=\"section\" data-heading={MODE[lang]}>\n        <div>\n          <input\n            type=\"radio\"\n            id=\"auto-mode\"\n            name=\"mode-radio\"\n            value=\"auto\"\n            checked={!isManual}\n            onChange={setMode}\n          />\n          <label htmlFor=\"auto-mode\">{AUTOMATIC[lang]}</label>\n        </div>\n        <div>\n          <input\n            type=\"radio\"\n            id=\"manual-mode\"\n            name=\"mode-radio\"\n            value=\"manual\"\n            checked={isManual}\n            onChange={setMode}\n          />\n          <label htmlFor=\"manual-mode\">{MANUAL[lang]}</label>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Settings;\n","import { Component } from \"react\";\n\nimport Board from \"../components/Board\";\nimport Rank from \"../components/Rank\";\nimport Square from \"../components/Square\";\nimport Knight from \"../components/Knight\";\nimport {\n  getSquareName,\n  getLegalMoves,\n  getRankName,\n  getFileName,\n  parseSquareName,\n} from \"../utils/boardUtils\";\nimport { getGradientImageData, getHeatmapRGB } from \"../utils/imageUtils\";\n\nimport Buttons from \"./Buttons\";\nimport DisclosureWidget from \"../components/DisclosureWidget\";\nimport Stats from \"./Stats\";\nimport Settings from \"./Settings\";\nimport { SPEED_MAP, CANVAS_WIDTH, MIN_INTERVAL } from \"../constants\";\nimport strings from \"../strings\";\n\nconst initialStats = {\n  totalMoves: 0,\n  countsForReturn: [],\n  countsForTour: [],\n  currentReturnCount: 0,\n  currentTourCount: 0,\n};\n\nconst { SETTINGS, STATS } = strings;\n\nclass Main extends Component {\n  constructor() {\n    super();\n\n    const totalFiles = 8;\n    const totalRanks = 8;\n    const visitCounts = new Array(totalRanks)\n      .fill(0)\n      .map(() => new Array(totalFiles).fill(0));\n\n    // fallbacks as a workaround for jsdom not doing css variables:\n    // see https://github.com/jsdom/cssstyle/pull/111\n    const lightSqBg =\n      getComputedStyle(document.documentElement).getPropertyValue(\n        \"--light-square-bg-color\"\n      ) || \"white\";\n    const darkSqBg =\n      getComputedStyle(document.documentElement).getPropertyValue(\n        \"--dark-square-bg-color\"\n      ) || \"black\";\n    const gradientImageData = getGradientImageData(CANVAS_WIDTH, [\n      lightSqBg,\n      darkSqBg,\n    ]);\n\n    const stats = Object.assign({}, initialStats);\n\n    this.boardEl = null;\n\n    this.state = {\n      totalRanks: totalRanks,\n      totalFiles: totalFiles,\n      stats: stats,\n      visitedSquareNameSet: new Set([\"a1\"]),\n      maxSquareCount: 1,\n      visitCounts: visitCounts,\n      startSquareName: \"a1\",\n      currentRankIndex: 0,\n      currentFileIndex: 0,\n      targetSquareNames: [],\n      squareWidth: 0,\n      speedIndex: 0,\n      displaySettings: {\n        showKnight: true,\n        showCount: true,\n        showPercent: false,\n        showHeatmap: false,\n        showHighlight: true,\n      },\n      gradientImageData: gradientImageData,\n      isManual: false,\n      isResizing: false,\n      isDragging: false,\n      isClicked: false,\n      timeoutId: null,\n    };\n  }\n\n  // lifecycle methods\n  componentDidMount() {\n    this.resizeObserver = new ResizeObserver(this.resizeCallback);\n    if (this.boardEl) {\n      this.resizeObserver.observe(this.boardEl);\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver.disconnect();\n    if (this.state.timeoutId) window.clearTimeout(this.state.timeoutId);\n  }\n\n  // callbacks for accessing DOM node information\n  boardRefCallback = (element) => {\n    if (element) {\n      if (!this.boardEl) this.boardEl = element;\n      const squareWidth = element.clientWidth / this.state.totalFiles;\n      this.setState({ squareWidth });\n    }\n  };\n\n  resizeCallback = ([{ contentRect }]) => {\n    if (this.state.timeoutId) {\n      window.clearTimeout(this.state.timeoutId);\n    }\n    const newId = window.setTimeout(() => {\n      this.setState({\n        isResizing: false,\n        timeoutId: null,\n      });\n    }, 200);\n\n    this.setState({\n      squareWidth: contentRect.width / this.state.totalFiles,\n      isResizing: true,\n      timeoutId: newId,\n    });\n  };\n\n  // heatmap methods\n  getHeatmapHexString = (heatValue) =>\n    getHeatmapRGB(heatValue, this.state.gradientImageData);\n\n  // logic utils for manipulating squares\n  // visually and in html, first row of table is last logical rank array\n  reverseRankIndex = (rankIndex) => this.state.totalRanks - rankIndex - 1;\n\n  // state-changing methods\n  moveKnight = (newMoves) => {\n    const newSquareNames = newMoves.map((indices) => getSquareName(...indices));\n    const newVisitCounts = this.state.visitCounts.map((rank, rankIndex) =>\n      rank.map(\n        (visitCount, fileIndex) =>\n          visitCount +\n          newSquareNames.filter(\n            (squareName) => squareName === getSquareName(fileIndex, rankIndex)\n          ).length\n      )\n    );\n    const lastMove = newMoves.slice(-1);\n\n    const newMaxSquareCount = newVisitCounts\n      .flat()\n      .reduce((acc, val) => Math.max(acc, val));\n    this.setState({\n      currentFileIndex: lastMove[0][0],\n      currentRankIndex: lastMove[0][1],\n      visitCounts: newVisitCounts,\n      maxSquareCount: newMaxSquareCount,\n    });\n  };\n\n  makeRandomMoves = (totalNewMoves = 1) => {\n    const {\n      currentFileIndex,\n      currentRankIndex,\n      startSquareName,\n      visitedSquareNameSet,\n      stats: {\n        totalMoves,\n        countsForReturn,\n        countsForTour,\n        currentReturnCount,\n        currentTourCount,\n      },\n    } = this.state;\n    let tempFileIndex = currentFileIndex;\n    let tempRankIndex = currentRankIndex;\n    let tempReturnCount = currentReturnCount;\n    let tempTourCount = currentTourCount;\n    let tempVisitedSquareNameSet = new Set(visitedSquareNameSet);\n\n    const newReturnCounts = [];\n    const newTourCounts = [];\n\n    const newMoves = [];\n    // TODO: DRY out the stat update logic\n    for (let i = 0; i < totalNewMoves; i += 1) {\n      const { totalRanks, totalFiles } = this.state;\n      const possibleMoves = getLegalMoves(\n        tempFileIndex,\n        tempRankIndex,\n        totalFiles,\n        totalRanks\n      );\n      const nextMoveIndex = Math.floor(Math.random() * possibleMoves.length);\n      const nextMove = possibleMoves[nextMoveIndex];\n      const nextSquareName = getSquareName(...nextMove);\n      tempReturnCount += 1;\n      if (nextSquareName === startSquareName) {\n        newReturnCounts.push(tempReturnCount);\n        tempReturnCount = 0;\n      }\n\n      tempTourCount += 1;\n      tempVisitedSquareNameSet.add(nextSquareName);\n      if (tempVisitedSquareNameSet.size === totalFiles * totalRanks) {\n        newTourCounts.push(tempTourCount);\n        tempVisitedSquareNameSet = new Set([nextSquareName]);\n        tempTourCount = 0;\n      }\n      newMoves.push(nextMove);\n      [tempFileIndex, tempRankIndex] = nextMove;\n    }\n    this.moveKnight(newMoves);\n\n    const newStats = {\n      totalMoves: totalMoves + totalNewMoves,\n      countsForReturn: countsForReturn.concat(newReturnCounts),\n      countsForTour: countsForTour.concat(newTourCounts),\n      currentReturnCount: tempReturnCount,\n      currentTourCount: tempTourCount,\n    };\n\n    this.setState({\n      stats: newStats,\n      visitedSquareNameSet: tempVisitedSquareNameSet,\n    });\n  };\n  makeManualMove = (squareName) => {\n    const {\n      totalFiles,\n      totalRanks,\n      startSquareName,\n      visitedSquareNameSet,\n      stats: {\n        totalMoves,\n        countsForReturn,\n        countsForTour,\n        currentReturnCount,\n        currentTourCount,\n      },\n    } = this.state;\n    let newReturnCount = currentReturnCount + 1;\n    const newReturnCounts = countsForReturn.slice(0);\n    if (squareName === startSquareName) {\n      newReturnCounts.push(newReturnCount);\n      newReturnCount = 0;\n    }\n    let newTourCount = currentTourCount + 1;\n    const newTourCounts = countsForTour.slice(0);\n    let newVisitedSquareNameSet = new Set(visitedSquareNameSet);\n    newVisitedSquareNameSet.add(squareName);\n    if (newVisitedSquareNameSet.size === totalFiles * totalRanks) {\n      newTourCounts.push(newTourCount);\n      newTourCount = 0;\n      newVisitedSquareNameSet = new Set([squareName]);\n    }\n    const { fileIndex, rankIndex } = parseSquareName(squareName);\n\n    this.moveKnight([[fileIndex, rankIndex]]);\n    this.setClickedSquare(fileIndex, this.reverseRankIndex(rankIndex));\n    const newStats = {\n      totalMoves: totalMoves + 1,\n      countsForReturn: countsForReturn.concat(newReturnCounts),\n      countsForTour: countsForTour.concat(newTourCounts),\n      currentReturnCount: newReturnCount,\n      currentTourCount: newTourCount,\n    };\n\n    this.setState({\n      stats: newStats,\n      visitedSquareNameSet: newVisitedSquareNameSet,\n    });\n  };\n\n  setSpeed = ({ target: { value } }) => {\n    this.setState({\n      speedIndex: parseInt(value, 10),\n    });\n  };\n\n  toggleDisplaySettings = (settingName) => {\n    const newDisplaySettings = Object.assign({}, this.state.displaySettings, {\n      [settingName]: !this.state.displaySettings[settingName],\n    });\n    this.setState({\n      displaySettings: newDisplaySettings,\n    });\n  };\n\n  resetBoard = (initialRankIndex = 0, initialFileIndex = 0) => {\n    if (this.state.isClicked) {\n      this.unsetClickedSquare();\n    }\n    const visitCounts = new Array(this.state.totalRanks)\n      .fill(0)\n      .map(() => new Array(this.state.totalFiles).fill(0));\n\n    const [currentRankIndex, currentFileIndex] = [\n      initialRankIndex,\n      initialFileIndex,\n    ];\n    const maxSquareCount = 1;\n    const startSquareName = getSquareName(initialFileIndex, initialRankIndex);\n    const visitedSquareNameSet = new Set([startSquareName]);\n    const stats = Object.assign({}, initialStats);\n\n    this.setState({\n      visitCounts,\n      currentFileIndex,\n      currentRankIndex,\n      maxSquareCount,\n      startSquareName,\n      visitedSquareNameSet,\n      stats,\n    });\n  };\n\n  changeDimensions = (newTotalFiles, newTotalRanks) => {\n    document.documentElement.style.setProperty(\"--total-files\", newTotalFiles);\n    document.documentElement.style.setProperty(\"--total-ranks\", newTotalRanks);\n    let newSquareWidth = 0;\n    if (this.boardEl) {\n      newSquareWidth = this.boardEl.clientWidth / newTotalFiles;\n    } else {\n      console.error(\"Unable to get ref when changing dimensions.\");\n    }\n\n    this.setState(\n      {\n        totalFiles: newTotalFiles,\n        totalRanks: newTotalRanks,\n        squareWidth: newSquareWidth,\n      },\n      () => {\n        this.resetBoard();\n      }\n    );\n  };\n\n  setIsDragging = (bool) => {\n    this.setState({ isDragging: bool });\n  };\n  setDropSquare = (squareName) => {\n    const { fileIndex, rankIndex } = parseSquareName(squareName);\n    this.resetBoard(rankIndex, fileIndex);\n  };\n  setMode = ({ target: { value } }) => {\n    if (value === \"auto\") {\n      this.setState({\n        isManual: false,\n        isClicked: false,\n        targetSquareNames: [],\n      });\n    } else if (value === \"manual\") {\n      this.setState({ isManual: true });\n    } else throw new Error(`Unrecognized value '${value}' in setMode.`);\n  };\n  setClickedSquare = (fileIndex, visualRankIndex) => {\n    const logicalRankIndex = this.reverseRankIndex(visualRankIndex);\n    const legalMoves = getLegalMoves(\n      fileIndex,\n      logicalRankIndex,\n      this.state.totalFiles,\n      this.state.totalRanks\n    );\n    const targetSquareNames = legalMoves.map((move) => getSquareName(...move));\n    this.setState({\n      isClicked: true,\n      targetSquareNames: targetSquareNames,\n    });\n  };\n  unsetClickedSquare = () => {\n    this.setState({\n      isClicked: false,\n      targetSquareNames: [],\n    });\n  };\n\n  render() {\n    const interval = Array.from(SPEED_MAP.values())[this.state.speedIndex];\n    const displayKnight =\n      this.state.displaySettings.showKnight && interval >= MIN_INTERVAL;\n    return (\n      <main>\n        <div className=\"wrapper\">\n          <Board refCallback={this.boardRefCallback}>\n            {this.state.visitCounts\n              .slice(0)\n              .reverse()\n              .map((rankVisits, visualRankIndex) => {\n                const logicalRankIndex = this.reverseRankIndex(visualRankIndex);\n                const isCurrentRank =\n                  logicalRankIndex === this.state.currentRankIndex;\n                const rankName = getRankName(logicalRankIndex);\n\n                return (\n                  <Rank\n                    key={logicalRankIndex}\n                    isCurrent={isCurrentRank}\n                    rankName={rankName}\n                  >\n                    {rankVisits.map((visitCount, logicalFileIndex) => (\n                      <Square\n                        key={getFileName(logicalFileIndex) + rankName}\n                        visitCount={visitCount}\n                        maxSquareCount={this.state.maxSquareCount}\n                        squareName={getFileName(logicalFileIndex) + rankName}\n                        getHeatmapHexString={this.getHeatmapHexString}\n                        setDropSquare={this.setDropSquare}\n                        makeManualMove={this.makeManualMove}\n                        unsetClickedSquare={this.unsetClickedSquare}\n                        displaySettings={this.state.displaySettings}\n                        isCurrent={\n                          isCurrentRank &&\n                          logicalFileIndex === this.state.currentFileIndex\n                        }\n                        isDragging={this.state.isDragging}\n                        isTarget={this.state.targetSquareNames.includes(\n                          getSquareName(logicalFileIndex, logicalRankIndex)\n                        )}\n                        isManual={this.state.isManual}\n                      />\n                    ))}\n                  </Rank>\n                );\n              })}\n          </Board>\n          {displayKnight && (\n            <Knight\n              squareWidth={this.state.squareWidth}\n              visualRankIndex={this.reverseRankIndex(\n                this.state.currentRankIndex\n              )}\n              fileIndex={this.state.currentFileIndex}\n              interval={interval}\n              setIsDragging={this.setIsDragging}\n              setClickedSquare={this.setClickedSquare}\n              unsetClickedSquare={this.unsetClickedSquare}\n              isDraggable={\n                this.state.stats.totalMoves === 0 || this.state.isManual\n              }\n              isResizing={this.state.isResizing}\n              isManual={this.state.isManual}\n              isClicked={this.state.isClicked}\n            />\n          )}\n          <div className=\"panel left\">\n            <DisclosureWidget buttonText={STATS[this.props.lang]}>\n              <Stats\n                stats={this.state.stats}\n                visitCounts={this.state.visitCounts}\n              />\n            </DisclosureWidget>\n          </div>\n          <div className=\"panel right\">\n            <Buttons\n              makeRandomMoves={this.makeRandomMoves}\n              resetBoard={this.resetBoard}\n              interval={interval}\n              totalFiles={this.state.totalFiles}\n              totalRanks={this.state.totalRanks}\n              isManual={this.state.isManual}\n            />\n            <DisclosureWidget buttonText={SETTINGS[this.props.lang]}>\n              <Settings\n                speedNames={Array.from(SPEED_MAP.keys())}\n                speedIndex={this.state.speedIndex}\n                setSpeed={this.setSpeed}\n                displaySettings={this.state.displaySettings}\n                toggleDisplaySettings={this.toggleDisplaySettings}\n                initialTotalFiles={this.state.totalFiles}\n                initialTotalRanks={this.state.totalRanks}\n                changeDimensions={this.changeDimensions}\n                isManual={this.state.isManual}\n                setMode={this.setMode}\n              />\n            </DisclosureWidget>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Main;\n","function getGradientImageData(canvasWidth, colorStops) {\n  const virtualCanvas = document.createElement('canvas');\n  virtualCanvas.height = 1;\n  virtualCanvas.width = canvasWidth;\n  const canvasContext = virtualCanvas.getContext('2d');\n  const heatmapGradient = canvasContext.createLinearGradient(0, 0, canvasWidth, 0);\n  colorStops.forEach((colorStop, i) => {\n    heatmapGradient.addColorStop(i / (colorStops.length - 1), colorStop);\n  });\n  canvasContext.fillStyle = heatmapGradient;\n  canvasContext.fillRect(0, 0, canvasWidth, 1);\n  const gradientImageData = canvasContext.getImageData(0, 0, canvasWidth, 1);\n  return gradientImageData;\n}\n\nfunction getHeatmapRGB(heatValue, imageData) {\n  const { length } = imageData.data;\n  const rawIndex = heatValue * (length - 1);\n  const index = rawIndex - rawIndex % 4;\n  const rbgInts = Array.from(imageData.data\n    .slice(index, index + 3));\n  const [red, green, blue] = rbgInts\n    .map(byte => byte.toString(16))\n    .map(string => string.length === 1 ? `0${string}` : string);\n  return `#${red}${green}${blue}`;\n}\n\nexport { getGradientImageData, getHeatmapRGB };\n","import { useContext } from \"react\";\nimport LangContext from \"../LangContext\";\nimport strings from \"../strings\";\n\nfunction LangSwitcher() {\n  const { setLang, lang } = useContext(LangContext);\n  const { OTHER_LANG, OTHER_LANG_CODE } = strings;\n\n  return (\n    <div className=\"lang-switcher\">\n      <button\n        type=\"button\"\n        className=\"button-link lang\"\n        onClick={() => {\n          setLang(OTHER_LANG_CODE[lang]);\n        }}\n      >\n        {OTHER_LANG[lang]}\n      </button>\n    </div>\n  );\n}\n\nexport default LangSwitcher;\n","import { Component } from \"react\";\n\nimport Main from \"./containers/Main\";\nimport LangContext from \"./LangContext\";\nimport LangSwitcher from \"./components/LangSwitcher\";\nimport strings from \"./strings\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const lang = navigator.language.slice(0, 2);\n\n    this.setLang = (newLang) => {\n      this.setState({ lang: newLang });\n    };\n    this.state = {\n      lang: lang,\n      setLang: this.setLang,\n    };\n  }\n\n  render() {\n    return (\n      <LangContext.Provider value={this.state}>\n        <div className=\"app\">\n          <header>\n            <LangSwitcher />\n            <h1>{strings.TITLE[this.state.lang]}</h1>\n          </header>\n          <Main lang={this.state.lang} />\n        </div>\n      </LangContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}